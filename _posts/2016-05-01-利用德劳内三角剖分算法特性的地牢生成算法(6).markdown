---
layout: post
title: "利用德劳内三角剖分算法特性的地牢生成算法(6)"
excerpt: ""
categories: [Unity,Delaunay]
comments: true
---
本着劳动人民最光荣的理念！ 就算在51劳动节，也要努力敲代码。QAQ

最终的好消息是，德劳内三角剖分算法！在自学的情况下在不断碰壁不断解决问题的过程中！ 最终！！！！完成了！！！感觉！！！十分自豪！！！！hhhhhhhhhhhhhhhhhhhhhhhhhhhhh此处省略不止一万字的“h”.

先来看看生成的效果图！ 在听我细细讲解。

![](http://imglf1.ph.126.net/I8gw8A7fJpd_6rHrJPPFJg==/6598246244159806456.png)

![](http://imglf0.ph.126.net/Gm7pm0SjLOGZ2916NvtSaA==/4842776974407958434.png)

是不是十分美丽!!!!!!!!!大声告诉我是不是!!!!!!!!!!!!



好的，下面开始总结。

开始学习这个三角剖分的契机是因为要做一个随机地牢地图生成器。然后其中有一个步骤是`将若干个离散的房间按照合理的状态链接`。达到一种，每一个房间都可以达到的效果。

在这个需求之下，我们可想而知，需要一个图。来满足我们的需求。因为图中的每一点都是可达的。把房间看作是图当中的结点即可。

我们用一个个的点看作是房间。并且这些点都是随机离散的。 应该如何形成合理的图呢。这里就涉及到了三角剖分。

点集的三角剖分（Triangulation），对数值分析（比如有限元分析）以及图形学来说，都是极为重要的一项预处理技术。尤其是Delaunay三角剖分，由于其独特性，关于点集的很多种几何图都和Delaunay三角剖分相关，如Voronoi图，EMST树，Gabriel图等。Delaunay三角剖分有最大化最小角，“最接近于规则化的“的三角网和唯一性（任意四点不能共圆）两个特点。所以，使用Delaunay三角剖分是很合理的。



在写这个算法的之前本来是想上网找轮子的。但是并没有找到好用的轮子。

于是本着`自己动手丰衣足食`的理念。我决定自己动手。写一个`Delaunay三角剖分算法`。

最初的思路是先找到凸包，然后再从凸包所有的边开始，向着内部不断建立符合要求得三角形，最终完成整个三角网。

但是这个方法，我没有理解透彻。在做出来的效果来看，十分的差。完全就不能形成合法的三角网。而且，想要调试无从下手。

于是我打算换一个方法来做。就是现在在使用的Bowyer-Watson算法，也就是逐点插入法。

就是维护一个合法的Delaunay三角网，并且在不断插入点的过程中保持三角网的合法性。

最开始做的时候死循环了。

一直很奇怪这是为什么，最后发现是因为把Edges和点生成三角形压入TempTri列表的时候放在了遍历TempTri的过程中，这样的话就会无限增加三角形。这个遍历也永远不会停下来。 ！！！

## 关键点在于，如何把不合法的边转换成合法的边。

![](http://imglf1.ph.126.net/tJsgHbk12q8GpA8whFwLrA==/4846999099058708911.jpg)

我最开始对于这个算法的理解，在插入点的时候。我以为假如这两个三角形的外接圆都包含了点的话，应该和这两个三角形5条边都构成三角形。

![](http://imglf2.ph.126.net/lW4Y6aWfqwrimZPmOzBd3w==/1158832479218930837.png)

其实不是的，只需要和除了边3以外的4条边构成三角形就行了。



这个地方也是整个算法最关键的步骤。

这个步骤也是网上大多数教程中一笔带过甚至没提及的东西。

以下思路全部都是
## 原创！！！原创！！！！！虽然算法效率可能不高！！

但是我做到了！！！

我的思路是，
## 从新加点开始顺时针旋转，然后每接触到一个点就记录下来，并且算出每一个点与下一个点之间的夹角

![](http://imglf0.ph.126.net/Teg-T10CYdceZLXrRJ7eLQ==/6598281428531906634.png)

![](http://imglf2.ph.126.net/wRIN01cr0Waxjm0ptOQAAQ==/6598281428531906639.png)

假如说这个两点与新加入点形成的顺时针方向的夹角大于了180度，则说明这个点在这些点集的凸包之外，别问我为什么，自己画N张不同情况图，就可以总结出来了 QAQ

假如说在点集凸包外的话，那么，我们需要进行一些处理，那就是在最后链接边的时候，不链接这两个点。



按照顺时针，把点按照次序连接起来，然后删除那条夹角大于180度的边。

即可。

再把这些边和新加入点去形成一个三角形。压入TempTri 列表。

如图所示

![](http://imglf1.ph.126.net/fu9mudIVjkW-SjgXhxlYOQ==/6598150586648192629.png)

![](http://imglf1.ph.126.net/Ldp4e9DLUcaWaYe1nToQIA==/1157706579312072034.png)

![](http://imglf1.ph.126.net/fO63qicLocZSS1agzX2fbw==/6598191268578420286.png)

后两张图是，同样点集，不同插入点的两个效果。

这就是我在这几天以来不断试错，不断总结得出的东西。其他的东西我没讲清楚的在我前面的日记里应该有。

要不在网上也有。

再贴一张调试过程中写的记录。大概，算是待解决问题列表和那些焕然大悟的记录。

![](http://imglf0.ph.126.net/i5M5FinIs7vWvykp5Q01hQ==/202099033380087765.png)

挺有意思的，在做的时候，总是问自己“为什么啊！为什么啊！”可能程序员在写代码的时候问自己最多的就是“为什么啊！”“为什么跑出来的效果又不对”

昨天晚上跟是抱着执着做到了晚上4点。反正寝室也就我一个人。

室友大概要想“你竟然背着我学习！！！” 了吧。【并不会】

0v0

在做的时候和刚刚做完的时候，真是超级感慨啊。 自己解决问题的感觉太棒了。感觉自己就是自己的英雄！！ hhhhh

这个这么难的问题，我竟然一个人解决了。 要知道，我去问C++老师，他都不会啊 。 hhhhhhhh

我通过自学自己弄出来了。 以后的困难会更多，但是我觉得自己都可以越过去啊。 毕竟， 我也想成为别人的英雄。 能自己完成高质量的独立游戏 。

之前被说程序员，巴拉巴拉的，嘛。 虽然说我现在是主攻程序。以后肯定是要自学包括美术音乐策划在内的所有东西的。

我要成为最终BOSS！！一般的人物！！

自满到此为止。这个难题也告一段落。

写了这么多，不再感慨反倒觉得这件事蛮平常的了。



接下来，又可以继续做我的随机地牢生成器了。 hhhh

做出来做成插件拿去卖会不会有人买啊。 hhhhh
